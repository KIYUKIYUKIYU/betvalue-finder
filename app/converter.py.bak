# app/converter.py
# 日本式 ⇄ ピナクル値（0.05刻み）の相互変換 + 記法パーサ
# 準拠: 「## 1. 変換表（ピナクル → 日本式）」に基づく 0.00〜4.00(0.05刻み)
# 例: 1.20(日本式) → 1.15(ピナクル), 1半 → 1.50, 0.7 → 0.35, 1半7 → 1.85
# サッカー分数表記対応: 0/3 → 0.3, 0/5 → 0.5, 0/7 → 0.7, 0/9 → 0.9

from __future__ import annotations
import re
from typing import Dict, Tuple

# --- テーブル生成 -------------------------------------------------------------

def _build_tables(max_pinnacle: float = 4.0, step: float = 0.05) -> Tuple[Dict[float, str], Dict[str, float]]:
    pinn2jp: Dict[float, str] = {}
    jp2pinn: Dict[str, float] = {}

    # 整数/小数→日本式の描画
    # 0.50刻みは「○半」、それ以外は「○.1〜○.9」または「○半1〜9」
    def to_jp_label(x: float) -> str:
        # 丸め誤差対策
        xi = round(x / 0.05)  # 0.05刻みに正規化
        x_ = xi * 0.05

        base_int = int(x_)
        frac = x_ - base_int

        # 0.00
        if abs(frac) < 1e-9:
            return f"{base_int}"
        # 0.50
        if abs(frac - 0.50) < 1e-9:
            return f"{base_int}半"
        # 0.05〜0.45 → 0.1〜0.9
        if 0.0 < frac < 0.5:
            # 0.05→0.1 / 0.10→0.2 ... 0.45→0.9
            d = int(round(frac / 0.05))  # 1〜9
            return f"{base_int}.{d}"
        # 0.55〜0.95 → 0半1〜0半9（または n半1〜n半9）
        if 0.5 < frac < 1.0:
            d = int(round((frac - 0.50) / 0.05))  # 1〜9
            return f"{base_int}半{d}"
        # 想定外はフォールバック
        return f"{x_:g}"

    # 正方向0.00→maxまで生成
    ticks = int(round(max_pinnacle / step))
    for i in range(ticks + 1):
        pinn = round(i * step, 10)
        jp = to_jp_label(pinn)
        pinn2jp[pinn] = jp
        jp2pinn[jp] = pinn

    return pinn2jp, jp2pinn

_PINN2JP, _JP2PINN = _build_tables()

# --- 日本式表記のパーサ -------------------------------------------------------
# 受理例:
#   "1.2", "0.7", "1", "1半", "1半7", "0半", "0半3"
#   "<1.2>", "<1半7>" ← <> は外して解釈
#   "0/3", "0/5", "0/7", "0/9" ← サッカー分数表記

_PAT_ANGLE = re.compile(r"^\s*<\s*(.+?)\s*>\s*$")

def normalize_jp_token(token: str) -> str:
    """
    <> を外し、全角/空白を整えた日本式ハンデ表記を返す。
    サッカーの分数表記（0/3など）を日本式小数に変換。
    """
    t = token.strip()
    m = _PAT_ANGLE.match(t)
    if m:
        t = m.group(1).strip()

    # 全角の「半」をそのまま、「1/2」系は不許可（明示合意後に拡張）
    # 小数点は'.'のみ許容
    t = t.replace(" ", "").replace("　", "")
    
    # サッカーの分数表記を日本式小数に変換（0/3→0.3, 0/5→0.5, 0/7→0.7, 0/9→0.9）
    if t.startswith("0/") and len(t) == 3 and t[2] in "13579":
        # 0/1 → 0.1, 0/3 → 0.3, 0/5 → 0.5, 0/7 → 0.7, 0/9 → 0.9
        t = f"0.{t[2]}"
    
    return t

def jp_to_pinnacle(jp: str) -> float:
    """
    日本式 → ピナクル値（0.05刻み）。未定義は ValueError。
    """
    t = normalize_jp_token(jp)
    if t in _JP2PINN:
        return _JP2PINN[t]
    # "1.20"のような小数2桁も許容 → "1.2"へ丸め
    if re.fullmatch(r"\d+(?:\.\d+)?", t):
        val = float(t)
        # 0.1〜0.9 は 0.05刻みへ写像（x*10→偶数/奇数ではないので丸め規則は表準拠とする）
        # 例: 1.2 → 1.15
        # 近傍マッチ: pinn値で最も近いキーへ
        nearest = round(val * 20) / 20.0 - 0.05  # 1.2なら 24/20=1.2 → -0.05=1.15
        nearest = max(0.0, min(4.0, round(nearest / 0.05) * 0.05))
        if nearest in _PINN2JP:
            return nearest
    raise ValueError(f"未対応の日本式ハンデ表記です: {jp}")

def pinnacle_to_jp(pinn: float) -> str:
    """
    ピナクル値（0.05刻み） → 日本式表記。未定義は ValueError。
    """
    # 0.05グリッドへ
    grid = round(round(pinn / 0.05) * 0.05, 10)
    if grid in _PINN2JP:
        return _PINN2JP[grid]
    raise ValueError(f"0.05刻み以外は非対応です: {pinn}")

# --- ユーティリティ -----------------------------------------------------------

def try_parse_jp(token: str) -> Tuple[bool, float]:
    """
    成功時 (True, pinn_value), 失敗時 (False, 0.0)
    """
    try:
        return True, jp_to_pinnacle(token)
    except Exception:
        return False, 0.0

def all_mappings() -> Tuple[dict, dict]:
    return _PINN2JP.copy(), _JP2PINN.copy()

if __name__ == "__main__":
    # 簡易テスト
    samples = ["<1.2>", "1半", "0.7", "1半7", "2", "0半5", "0/3", "0/5", "0/7"]
    for s in samples:
        ok, v = try_parse_jp(s)
        print(s, "->", ok, v, "->", pinnacle_to_jp(v) if ok else "")
